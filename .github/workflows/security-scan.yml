name: Security Scan (SAST + DAST)

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Docker image name to scan'
        required: true
        type: string
      docker_registry:
        description: 'Docker registry URL'
        required: true
        type: string
      aws_region:
        description: 'AWS region'
        required: true
        type: string

env:
  APP_NAME: "devsecops-agent"
  APP_VERSION: ${{ github.sha }}

jobs:
  # SAST (Static Application Security Testing) Jobs
  codeql-sast:
    name: CodeQL SAST Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  semgrep-sast:
    name: Semgrep SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload Semgrep Results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: |
            semgrep.sarif
            semgrep-results.json
          retention-days: 30


  npm-audit:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run NPM Audit
        run: |
          echo "Running NPM security audit..."
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          
          # Also run with production flag
          npm audit --audit-level=moderate --production --json > npm-audit-production-results.json || true

      - name: Upload NPM Audit Results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: |
            npm-audit-results.json
            npm-audit-production-results.json
          retention-days: 30

  # DAST (Dynamic Application Security Testing) Jobs
  owasp-zap-dast:
    name: OWASP ZAP DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Application for DAST Testing
        run: |
          echo "Deploying application for DAST testing..."
          # Pull the latest image
          docker pull ${{ inputs.docker_registry }}:${{ inputs.image_name }}
          
          # Run the application container
          docker run -d \
            --name dast-test-app \
            -p 3001:3001 \
            -e NODE_ENV=development \
            -e PORT=3001 \
            -e API_KEY=test-api-key \
            -e CORS_ORIGIN=http://localhost:3000 \
            -e LOG_LEVEL=debug \
            -e MOMO_API_KEY=test-momo-api-key \
            -e MOMO_API_URL=http://localhost:8080/api \
            -e MOMO_MERCHANT_ID=test-merchant-123 \
            ${{ inputs.docker_registry }}:${{ inputs.image_name }}

      - name: Wait for Application to Start
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "Application is ready for DAST testing"
              break
            fi
            echo "Attempt $i: Application not ready yet..."
            sleep 10
          done

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: 'http://localhost:3001'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-results
          path: |
            zap-baseline-report.html
            zap-full-report.html
            zap-results.json
          retention-days: 30

      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker stop dast-test-app || true
          docker rm dast-test-app || true

  nuclei-dast:
    name: Nuclei DAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Deploy Application for DAST Testing
        run: |
          echo "Deploying application for DAST testing..."
          # Pull the latest image
          docker pull ${{ inputs.docker_registry }}:${{ inputs.image_name }}
          
          # Run the application container
          docker run -d \
            --name nuclei-test-app \
            -p 3002:3001 \
            -e NODE_ENV=development \
            -e PORT=3001 \
            -e API_KEY=test-api-key \
            -e CORS_ORIGIN=http://localhost:3000 \
            -e LOG_LEVEL=debug \
            -e MOMO_API_KEY=test-momo-api-key \
            -e MOMO_API_URL=http://localhost:8080/api \
            -e MOMO_MERCHANT_ID=test-merchant-123 \
            ${{ inputs.docker_registry }}:${{ inputs.image_name }}

      - name: Wait for Application to Start
        run: |
          echo "Waiting for application to start..."
          for i in {1..30}; do
            if curl -f http://localhost:3002/health > /dev/null 2>&1; then
              echo "Application is ready for Nuclei testing"
              break
            fi
            echo "Attempt $i: Application not ready yet..."
            sleep 10
          done

      - name: Install Nuclei
        run: |
          go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Run Nuclei Scan
        run: |
          echo "Running Nuclei vulnerability scan..."
          nuclei -u http://localhost:3002 \
            -t cves/,exposures/,vulnerabilities/,misconfiguration/ \
            -severity critical,high,medium \
            -json \
            -o nuclei-results.json \
            -stats \
            -silent || true

      - name: Upload Nuclei Results
        uses: actions/upload-artifact@v4
        with:
          name: nuclei-results
          path: nuclei-results.json
          retention-days: 30

      - name: Cleanup Test Environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker stop nuclei-test-app || true
          docker rm nuclei-test-app || true

  # Security Summary Job
  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [codeql-sast, semgrep-sast, npm-audit, owasp-zap-dast, nuclei-dast]
    if: always()
    steps:
      - name: Download All Security Results
        uses: actions/download-artifact@v4
        with:
          path: ./security-results

      - name: Generate Security Report
        run: |
          echo "# 🔒 Security Scan Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 SAST (Static Analysis) Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # CodeQL Results
          if [ -d "./security-results/codeql-results" ]; then
            echo "### 🔍 CodeQL Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ CodeQL scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- Results available in Security tab" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Semgrep Results
          if [ -f "./security-results/semgrep-results/semgrep-results.json" ]; then
            echo "### 🔍 Semgrep Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Semgrep scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- Results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          
          # NPM Audit Results
          if [ -f "./security-results/npm-audit-results/npm-audit-results.json" ]; then
            echo "### 🔍 NPM Security Audit" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ NPM audit completed" >> $GITHUB_STEP_SUMMARY
            echo "- Results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## 🌐 DAST (Dynamic Analysis) Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # OWASP ZAP Results
          if [ -d "./security-results/zap-results" ]; then
            echo "### 🔍 OWASP ZAP Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ OWASP ZAP scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- Results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Nuclei Results
          if [ -f "./security-results/nuclei-results/nuclei-results.json" ]; then
            echo "### 🔍 Nuclei Analysis" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Nuclei scan completed" >> $GITHUB_STEP_SUMMARY
            echo "- Results available in artifacts" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "## 📁 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Results: Available in Security tab" >> $GITHUB_STEP_SUMMARY
          echo "- Semgrep Results: semgrep-results" >> $GITHUB_STEP_SUMMARY
          echo "- NPM Audit: npm-audit-results" >> $GITHUB_STEP_SUMMARY
          echo "- OWASP ZAP: zap-results" >> $GITHUB_STEP_SUMMARY
          echo "- Nuclei: nuclei-results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** Detailed reports are available in the workflow artifacts." >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            let comment = '## 🔒 Security Scan Results\n\n';
            comment += 'Comprehensive security scans have completed for this PR.\n\n';
            comment += '### Scan Summary:\n';
            comment += '- ✅ CodeQL SAST - Completed\n';
            comment += '- ✅ Semgrep SAST - Completed\n';
            comment += '- ✅ NPM Audit - Completed\n';
            comment += '- ✅ OWASP ZAP DAST - Completed\n';
            comment += '- ✅ Nuclei DAST - Completed\n\n';
            comment += 'Detailed results are available in the workflow artifacts and Security tab.\n\n';
            comment += '**Note:** This scan runs automatically on the dev branch.';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
