name: CI/CD Pipeline

on:
  push:
    branches: [ dev, main ]
  pull_request:
    branches: [ dev, main ]

env:
  AWS_REGION: eu-west-2
  DOCKER_REGISTRY: 600197618921.dkr.ecr.eu-west-2.amazonaws.com/ecobank
  PROJECT_NAME: training-project
  IMAGE_NAME: devsecops-training-${{ github.run_id }}

jobs:
  build-docker-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_UAT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_UAT }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        id: build
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ecobank
          IMAGE_TAG: ${{ env.IMAGE_NAME }}
        run: |
          echo "Image name is ${{ env.IMAGE_NAME }}"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  scan-image:
    runs-on: ubuntu-latest
    needs: build-docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_UAT }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_UAT }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/ecobank:${{ env.IMAGE_NAME }}
          format: 'json'
          output: 'trivy-report.json'
          severity: 'CRITICAL,HIGH'
          scanners: 'vuln'

      - name: Check for vulnerabilities
        run: |
          if [ -s trivy-report.json ]; then
            echo "Vulnerabilities found:"
            cat trivy-report.json
            exit 1
          else
            echo "No HIGH or CRITICAL vulnerabilities found."
          fi

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

  deploy-uat:
    runs-on: ubuntu-latest
    needs: [build-docker-push, scan-image]
    if: github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: '5.0.0'

      - name: Configure Git
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Build Kustomize manifests
        run: |
          cd deployment-artefacts/
          kustomize build overlays/uat/ > overlays/uat/deployment-final.yaml

      - name: Create set-image.yaml
        run: |
          cd deployment-artefacts/
          echo "apiVersion: apps/v1" > overlays/uat/set-image.yaml
          echo "kind: Deployment" >> overlays/uat/set-image.yaml
          echo "metadata:" >> overlays/uat/set-image.yaml
          echo "  name: training-project-deployment" >> overlays/uat/set-image.yaml
          echo "spec:" >> overlays/uat/set-image.yaml
          echo "  template:" >> overlays/uat/set-image.yaml
          echo "    spec:" >> overlays/uat/set-image.yaml
          echo "      containers:" >> overlays/uat/set-image.yaml
          echo "        - name: training-project-deployment" >> overlays/uat/set-image.yaml
          echo "          image: ${{ env.DOCKER_REGISTRY }}:${{ env.IMAGE_NAME }}" >> overlays/uat/set-image.yaml

      - name: Commit and push changes
        run: |
          cd deployment-artefacts/
          git add overlays/uat/set-image.yaml overlays/uat/deployment-final.yaml
          git commit -m "Update training-project deployment image to ${{ env.DOCKER_REGISTRY }}:${{ env.IMAGE_NAME }} [skip ci]"
          git push

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v4
        with:
          name: deployment-manifest
          path: deployment-artefacts/overlays/uat/deployment-final.yaml
          retention-days: 1
